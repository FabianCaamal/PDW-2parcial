{"version":3,"sources":["pages/Splash.jsx","pages/lista/Agregar.jsx","pages/lista/Card.jsx","pages/lista/Listado.jsx","pages/login/Login.jsx","routes/Routes.jsx","App.js","serviceWorkerRegistration.js","index.js"],"names":["Splash","className","src","alt","style","textAlign","Agregar","newState","initialState","id","Date","getMilliseconds","nombre","desc","useState","state","setState","handleInput","target","name","value","onSubmit","e","preventDefault","onChange","type","placeholder","Card","width","onClick","filter","i","Listado","itemLocal","localStorage","getItem","initalState","JSON","parse","setItem","stringify","initial","setInitial","useEffect","fontSize","map","item","Login","history","navigate","useNavigate","Routes","exact","path","element","App","setTimeout","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.5778b725.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../styles/splash.css'\r\n\r\nexport const Splash = () => {\r\n    return (\r\n        <div className=\"App\">\r\n            <div>\r\n                <img src=\"logo512.png\" className=\"App-logo\" alt=\"logo\" />\r\n                <p style={{ textAlign: 'center' }} > PWA - Tarea </p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react';\r\nimport '../../styles/agregar.css'\r\n\r\nexport const Agregar = ({ newState }) => {\r\n\r\n    const initialState = {\r\n        id: new Date().getMilliseconds(),\r\n        nombre: '',\r\n        desc: ''\r\n    }\r\n\r\n    const [state, setState] = useState(initialState);\r\n\r\n    const { nombre, desc } = state;\r\n\r\n    const handleForm = (e) => {\r\n        e.preventDefault();\r\n\r\n        newState(e => [...e, state])\r\n\r\n        setState(initialState)\r\n    }\r\n\r\n    const handleInput = ({ target }) => {\r\n        setState({ ...state, [target.name]: target.value })\r\n    }\r\n\r\n    return (\r\n        <div className=\"agregar\">\r\n            <form onSubmit={ handleForm } className=\"agregar-form\" >\r\n\r\n                <input onChange={handleInput} value={nombre} type=\"text\" placeholder=\"Para...\" name=\"nombre\" />\r\n                <input onChange={handleInput} value={desc} type=\"text\" name=\"desc\" placeholder=\"Asunto\"  />\r\n\r\n                <button>agregar</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport const Card = ({ name, desc, setState, id }) => {\r\n\r\n    const eliminar = () => {\r\n        setState(e => e.filter( i => i.id !== id) ) \r\n    }\r\n\r\n    return (\r\n        <div className=\"target-container\">\r\n            <div className=\"target\">\r\n                <img src=\"logo192.png\" width=\"50\" alt=\"icon\" className=\"icon\" />\r\n\r\n                <div>\r\n                    <h4>{ name }</h4>\r\n\r\n                    <p>{ desc }</p>\r\n\r\n                    <button onClick={() => eliminar() } >eliminar</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport '../../styles/listado.css'\r\nimport { Agregar } from './Agregar';\r\nimport { Card } from './Card'\r\n\r\nexport const Listado = () => {\r\n\r\n    const itemLocal = localStorage.getItem('listado');\r\n\r\n    let initalState = [\r\n        {\r\n            id: 43,\r\n            nombre: 'Fabian',\r\n            desc: 'cita el lunes'\r\n        },\r\n        {\r\n            id: 23,\r\n            nombre: 'Maritza',\r\n            desc: 'entregar reporte'\r\n        },\r\n        {\r\n            id: 87,\r\n            nombre: 'Manuel',\r\n            desc: 'mandar conclucion'\r\n        },\r\n        {\r\n            id: 98,\r\n            nombre: 'Mario',\r\n            desc: 'hacer el reporte'\r\n        },\r\n    ]\r\n    \r\n    const [initial, setInitial] = useState(() => {\r\n        if(itemLocal) {\r\n            return JSON.parse(itemLocal)\r\n        } else {\r\n            localStorage.setItem('listado', JSON.stringify(initalState))\r\n\r\n            return initalState;\r\n        }\r\n    });\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem('listado', JSON.stringify(initial))\r\n    }, [ initial ])\r\n\r\n    return (\r\n        <div>\r\n            <h1 style={{ textAlign: 'center', fontSize: 45 }} >Contactos</h1> \r\n\r\n            <Agregar newState={setInitial} />\r\n\r\n            <div className=\"listado\">\r\n                {\r\n                    initial.map( (item) => (\r\n                        <Card \r\n                            key={item.id} \r\n                            id={item.id}\r\n                            name={item.nombre} \r\n                            desc={item.desc}\r\n                            setState={ setInitial }\r\n                        /> \r\n                    ))\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { useNavigate } from 'react-router';\r\nimport '../../styles/login.css'\r\n\r\nexport const Login = ({ history }) => {\r\n\r\n    const navigate = useNavigate();\r\n\r\n    return (\r\n        <div className=\"card-login\">\r\n            <div className=\"card\">\r\n                <h1>Login</h1>\r\n\r\n                <form className=\"form\">\r\n                    <input type=\"email\" placeholder=\"Email\"/>\r\n                    <input type=\"password\" placeholder=\"Password\"/>\r\n                    <br />\r\n                    <button onClick={() => navigate('lista') } >Iniciar sesion</button>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { BrowserRouter, Route, Routes as Switch } from 'react-router-dom'\r\nimport { Listado } from '../pages/lista/Listado'\r\nimport { Login } from '../pages/login/Login'\r\n\r\nexport const Routes = () => {\r\n    return (\r\n        <BrowserRouter>\r\n            \r\n            <Switch>\r\n                <Route exact path=\"/\" element={ <Login /> } />\r\n                <Route exact path=\"/lista\" element={ <Listado /> } />\r\n            </Switch>\r\n\r\n        </BrowserRouter>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react'\nimport { Splash } from './pages/Splash';\nimport { Routes } from './routes/Routes';\nimport './styles/App.css';\n\nconst App = () => {\n\n  const [state, setState] = useState(true)\n\n  useEffect(() => {\n\n    setTimeout(() => {\n      setState(false)\n    }, 1000)\n\n  }, [])\n\n  return (\n    <>\n      { state ? <Splash /> : <Routes /> }\n    </>\n  )\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nReactDOM.render(\n  <App />, document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n"],"sourceRoot":""}